parameters:
  - name: 'iOSAppHostingSdkGitPath'
    default: none
    type: string

steps:
  - checkout: self
  # branch should be changed after test
  - checkout: ${{ parameters.iOSAppHostingSdkGitPath }}@refs/heads/kx/pipeline_connection_preparation
    path: iOSHost
    persistCredentials: true

  - task: InstallSSHKey@0
    displayName: 'Install an SSH key for OneDSTelemetry'
    inputs:
      knownHostsEntry: 'github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg='
      sshPublicKey: '$(OneDSTelemetryKey)'
      sshKeySecureFile: 'ios_sdk_dev_1ds_key'

  - bash: |
      sudo gem install cocoapods
    displayName: Install Cocoapods
    workingDirectory: '$(Agent.BuildDirectory)/iOSHost'

  - bash: |
      pod install > /dev/null
    displayName: Run Cocoapods - pod install
    workingDirectory: '$(Agent.BuildDirectory)/iOSHost'

  - bash: |
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    displayName: Install Homebrew
    workingDirectory: '$(System.DefaultWorkingDirectory)'

  - bash: |
      brew install xctesthtmlreport
    displayName: "Install XCTestHtmlReport for publishing result"
    workingDirectory: '$(System.DefaultWorkingDirectory)'

  - bash : 'sh build_sdk.sh'
    displayName: "Build iOS SDK"
    workingDirectory: '$(Agent.BuildDirectory)/iOSHost/jobs/ciDevTools'
  
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"
    displayName: "Install Node.js"

  - task: YarnInstaller@3
    inputs:
      versionSpec: "1.x"

  - task: Yarn@2
    inputs:
      Arguments: 'install'
      ProjectDirectory: '$(ClientSdkProjectDirectory)'
    displayName: 'Run yarn install on TeamsJS using task instead of bash'
    retryCountOnTaskFailure: 2

  - task: Yarn@2
    inputs:
      Arguments: 'build'
      ProjectDirectory: '$(ClientSdkProjectDirectory)'
    displayName: 'Build TeamsJS'

  - bash: 'nohup yarn start-test-app &'
    displayName: "Run sample test app in background"
    workingDirectory: '$(ClientSdkProjectDirectory)'

  - bash: 'sh disable_slow_animation.sh'
    displayName: 'Disable Slow Animation'
    workingDirectory: '$(Agent.BuildDirectory)/iOSHost/jobs/ciDevTools'

  - bash: 'sh parallel_ui_testing_for_publishing.sh'
    displayName: "iOS UI/E2E Tests"
    workingDirectory: '$(Agent.BuildDirectory)/iOSHost/jobs/ciDevTools'

  - bash: 'sh generate_junit_report.sh'
    displayName: "Generate report to be published"
    workingDirectory: '$(Agent.BuildDirectory)/iOSHost/jobs/ciDevTools'
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFiles: '**/*.junit'
      failTaskOnFailedTests: false
      testRunTitle: 'E2E Tests - iOS'
      searchFolder: '$(Agent.BuildDirectory)/iOSHost'
      mergeTestResults: true
    condition: succeededOrFailed()
